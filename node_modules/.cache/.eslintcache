[{"/Users/physics/Desktop/temp/game-of-life/src/index.js":"1"},{"size":17847,"mtime":1659692565012,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","suppressedMessages":"6","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":1,"source":"7"},"ry5vuj","/Users/physics/Desktop/temp/game-of-life/src/index.js",["8","9","10","11","12","13","14","15","16","17","18"],[],"'use strict';\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Col, Row , Container} from 'react-bootstrap';\nimport './index.css';\n\nconst SIZE = 45; // size of the grid\nconst REFRESH_INTERVAL = 200; // refresh interval in ms\nconst WIDTH_COEFFICIENT = 14; // width coefficient for the grid\nlet runs = null; // number of runs\nlet flag = false; // flag for the existence of the life\n\n\n// ===== Fundamental Data Structures =====\n  // Cell Data Structure\nclass Cell {\n  x;\n  y;\n  \n  neighbors = [];\n  isNowLive;\n  willBeLive;\n \n  constructor(inX, inY) {\n      this.x = inX;\n      this.y = inY;\n      this.isNowLive = false;\n      this.neighbors = [this, this, this, this, \n        this, this, this,this]; // {left_top,top,right_top,left,right,left_bottom,bottom,right_bottom}\n  }\n  getX() {\n      return this.x;\n  }\n\n  getY() {\n      return this.y;\n  }\n  \n  isLive() {\n      return this.isNowLive;\n  }\n\n  equal(other) {\n      return ((this.getX() == other.getX()) && (this.getY() == other.getY()));\n  }\n \n  setLeft(inCell) {\n    this.neighbors[3] = inCell;\n  }\n  setRight(inCell) {\n    this.neighbors[4] = inCell;\n  }\n  setTop(inCell) {\n    this.neighbors[1] = inCell;\n  }\n  setBottom(inCell) {\n    this.neighbors[6] = inCell;\n  }\n  setLeftTop(inCell) {\n    this.neighbors[0] = inCell;\n  }\n  setRightTop(inCell) {\n    this.neighbors[2] = inCell;\n  }\n  setLeftBottom(inCell) {\n    this.neighbors[5] = inCell;\n  }\n  setRightBottom(inCell) {\n    this.neighbors[7] = inCell;\n  }\n \n  setBorn() {\n    this.willBeLive = true;\n  }\n  setDie() {\n      this.willBeLive = false;\n  }\n\n  getCountLiveNeighbors() {\n      let count = 0;\n      for (let i = 0;i<8;i++) {\n        let c = this.neighbors[i];\n        if (c!=null && c.isNowLive && !c.equal(this)) {count++;}\n      }\n      return count;\n  }\n \n  setNextLife() {\n      let numLiveNeighbors = this.getCountLiveNeighbors();\n      if (numLiveNeighbors<2 || numLiveNeighbors>3) {\n          this.setDie();\n      }\n      else if (numLiveNeighbors == 3) {\n          this.setBorn();\n      }\n  }\n\n  refreshNextLive() {\n      this.isNowLive = this.willBeLive;\n  }\n} \n\n  // Cell World Data Structure\nclass CellWorld {\n  width; // w\n  height; // h\n\n  heightBound; // h\n\n  widthBound; // w\n  cells = []; // [h][w]\n\n  constructor(inH, inW) {\n     this.height = inH;\n     this.width = inW;\n     this.heightBound = this.height+2;\n     this.widthBound = this.width+2;\n     for (let i=0;i<this.heightBound;i++) {\n       this.cells[i] = new Array();\n         for (let j=0;j<this.widthBound;j++) {\n            this.cells[i][j] = new Cell(j,i);\n         }\n     }\n     for (let i=1;i<this.height+1;i++) {\n         for (let j=1;j<this.width+1;j++) {\n           this.connectToNeighbors(this.cells[i][j]);\n         }\n     }\n  }\n\n  connectToNeighbors(inCell) {\n      inCell.setLeft(this.cells[inCell.getY()][inCell.getX()-1]);\n      inCell.setRight(this.cells[inCell.getY()][inCell.getX()+1]);\n\n      inCell.setTop(this.cells[inCell.getY()-1][inCell.getX()]);\n      inCell.setBottom(this.cells[inCell.getY()+1][inCell.getX()]);\n\n      inCell.setLeftTop(this.cells[inCell.getY() - 1][inCell.getX() - 1]);\n      inCell.setRightTop(this.cells[inCell.getY() - 1][inCell.getX() + 1]);\n\n      inCell.setLeftBottom(this.cells[inCell.getY() + 1][inCell.getX() - 1]);\n      inCell.setRightBottom(this.cells[inCell.getY() + 1][inCell.getX() + 1]);\n  }\n\n  getCell(inI) {\n    let inX = Math.floor(inI/SIZE);\n    let inY = inI%SIZE;\n    return this.cells[inX+1][inY+1];\n  }\n\n  add(inCell) {\n    this.cells[inCell.getY()+1][inCell.getX()+1].setBorn();\n    this.cells[inCell.getY()+1][inCell.getX()+1].refreshNextLive();\n  }\n\n  reverse(inCell) {\n    if (inCell.isLive()) {\n      inCell.setDie();\n    }\n    else {\n      inCell.setBorn();\n    }\n    inCell.refreshNextLive();\n  }\n\n  refresh() {\n      for (let i=1;i<this.height+1;i++) {\n          for (let j=1;j<this.width+1;j++) {\n              this.cells[i][j].setNextLife();\n          }\n      }\n      for (let i=1;i<this.height+1;i++) {\n          for (let j=1;j<this.width+1;j++) {\n            this.cells[i][j].refreshNextLive();\n          }\n      }\n  }\n\n  resetWorld() {\n    for (let i=1;i<this.height+1;i++) {\n        for (let j=1;j<this.width+1;j++) {\n          this.cells[i][j].setDie();\n          this.cells[i][j].refreshNextLive();\n        }\n    }\n  }\n\n  listAll() {\n  let out=[];\n      for (let i=1;i<this.height+1;i++) {\n          for (let j=1;j<this.width+1;j++) {\n              if (this.cells[i][j].isLive()) {\n                out.push(true);\n              }\n              else {\n                out.push(false);\n              }\n          }\n      }\n  return out;\n  }\n\n  getLiveNum() {\n    let count = 0;\n    for (let i=1;i<this.height+1;i++) {\n        for (let j=1;j<this.width+1;j++) {\n            if (this.cells[i][j].isLive()) {\n              count++;\n            }\n        }\n    }\n    return count;\n  }\n}\n// ===== End of Fundamental Data Structures =====\n\n\n// ===== Frontend Components =====\n  // Square for Cell\nclass Square extends React.Component{\n\n  setCheck() {\n    this.setState({checked: !this.state.checked});\n  }\n\n  setUnCheck() {\n    this.setState({checked: !this.state.checked});\n  }\n\n  render() {\n    return (\n      <button className = \"square\"\n              onClick={() => this.props.onClick()}\n              style={{background: this.props.checked? \"#000\":\"#fff\"}}>\n                {/* {this.props.value} */}\n      </button>\n    );\n  }\n\n}\n  // Board for Cell World\nclass Board extends React.Component {\n  time = 0;\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      theWorld : new CellWorld(SIZE,SIZE),\n      squares: Array(SIZE*SIZE).fill(false),\n      \n    };\n  }  \n  \n  start() {\n    if (this.state.theWorld.getLiveNum() == 0) {\n      flag = false;\n      clearInterval(runs);\n      return;\n    }\n    flag = true;\n    clearInterval(runs);\n    runs = setInterval(() => this.refreshBoard(), REFRESH_INTERVAL);\n  }\n\n  refreshBoard() {\n    if (this.state.theWorld.getLiveNum() == 0) {\n      this.stop();\n      return;\n    }\n    if (flag == false) { \n      clearInterval(runs);\n      return;\n    }\n    document.getElementById(\"startBtn\").style.backgroundColor = \"#00FF00\";\n    document.getElementById(\"stopBtn\").style.backgroundColor = \"#fff\";\n    this.state.theWorld.refresh();\n    this.setState({squares: this.state.theWorld.listAll()});\n    this.time += 1;\n    this.updateData();\n  }\n\n  stop() {\n    flag = false;\n    clearInterval(runs);\n    document.getElementById(\"startBtn\").style.backgroundColor = \"#fff\";\n    document.getElementById(\"stopBtn\").style.backgroundColor = \"#f00\";\n  }\n\n  reset() {\n    this.time=0\n    this.stop();\n    this.state.theWorld.resetWorld();\n    this.setState({squares: this.state.theWorld.listAll()});\n    document.getElementById(\"startBtn\").style.backgroundColor = \"#fff\";\n    document.getElementById(\"stopBtn\").style.backgroundColor = \"#fff\";\n\n    document.getElementById(\"lifeA\").style.backgroundColor = \"#fff\";\n    document.getElementById(\"lifeB\").style.backgroundColor = \"#fff\";\n    document.getElementById(\"theWorld\").style.backgroundColor = \"#fff\";\n    this.updateData();\n  }\n\n  updateData() {\n    document.getElementById(\"timeData\").innerHTML = \"时间 | Time: \"+(this.time/5).toFixed(0)+\"s\";\n    document.getElementById(\"amountData\").innerHTML = \"数量 | Lives: \"+this.state.theWorld.getLiveNum();\n  }\n\n  lifeA () {\n    this.reset();\n\n    document.getElementById(\"lifeA\").style.backgroundColor = \"#ddd\";\n    document.getElementById(\"lifeB\").style.backgroundColor = \"#fff\";\n    document.getElementById(\"theWorld\").style.backgroundColor = \"#fff\";\n\n    this.handleClick(22*SIZE+9);\n    this.handleClick(22*SIZE+10);\n    this.handleClick(22*SIZE+11);\n    this.handleClick(22*SIZE+12);\n    this.handleClick(22*SIZE+13);\n    this.handleClick(22*SIZE+14);\n  }\n\n  lifeB() {\n    this.reset();\n\n    document.getElementById(\"lifeA\").style.backgroundColor = \"#fff\";\n    document.getElementById(\"lifeB\").style.backgroundColor = \"#ddd\";\n    document.getElementById(\"theWorld\").style.backgroundColor = \"#fff\";\n\n    this.handleClick(4*SIZE+3);\n    this.handleClick(5*SIZE+4);\n    this.handleClick(5*SIZE+5);\n    this.handleClick(4*SIZE+5);\n    this.handleClick(3*SIZE+5);\n\n  }\n\n  world() {\n    this.reset();\n\n    document.getElementById(\"lifeA\").style.backgroundColor = \"#fff\";\n    document.getElementById(\"lifeB\").style.backgroundColor = \"#fff\";\n    document.getElementById(\"theWorld\").style.backgroundColor = \"#ddd\";\n\n    this.handleClick(8*SIZE+3);\n    this.handleClick(10*SIZE+3);\n    this.handleClick(11*SIZE+4);\n    this.handleClick(11*SIZE+5);\n    this.handleClick(11*SIZE+6);\n    this.handleClick(11*SIZE+7);\n    this.handleClick(10*SIZE+7);\n    this.handleClick(9*SIZE+7);\n    this.handleClick(8*SIZE+6);\n\n    this.handleClick(31*SIZE+41);\n    this.handleClick(33*SIZE+41);\n    this.handleClick(34*SIZE+40);\n    this.handleClick(34*SIZE+39);\n    this.handleClick(34*SIZE+38);\n    this.handleClick(34*SIZE+37);\n    this.handleClick(33*SIZE+37);\n    this.handleClick(32*SIZE+37);\n    this.handleClick(31*SIZE+38);\n\n    this.handleClick(3*SIZE+41);\n    this.handleClick(4*SIZE+40);\n    this.handleClick(4*SIZE+39);\n    this.handleClick(3*SIZE+39);\n    this.handleClick(2*SIZE+39);\n\n    this.handleClick(3+41*SIZE);\n    this.handleClick(4+40*SIZE);\n    this.handleClick(4+39*SIZE);\n    this.handleClick(3+39*SIZE);\n    this.handleClick(2+39*SIZE);\n\n    for (let i=0;i<8;i++) { \n      this.handleClick(22*SIZE+(3+i));\n    }\n    for (let i=0;i<8;i++) { \n      this.handleClick(22*SIZE+(33+i));\n    }\n\n    for (let i=0;i<8;i++) { \n      this.handleClick((3+i)*SIZE+22);\n    }\n\n    for (let i=0;i<8;i++) { \n      this.handleClick((33+i)*SIZE+22);\n    }\n\n  }\n\n\n  handleClick(i) {\n    let inX = Math.floor(i/SIZE);\n    let inY = i%SIZE;\n    // console.log(inX,inY);\n    let newCell = this.state.theWorld.getCell(i);\n    // console.log(newCell.isLive());\n    this.state.theWorld.reverse(newCell);\n    // console.log(this.state.theWorld.getCell(i).isLive());\n    this.setState({squares: this.state.theWorld.listAll()});\n    this.updateData();\n  }\n\n  renderSquare(i) {\n    return (\n      <Square\n        value = {this.state.squares[i]? \"X\":\"O\"}\n        checked={(this.state.squares[i])}\n        onClick={() => this.handleClick(i)}\n      />\n    );\n  }\n\n  createSquares() {\n    let rows = [];\n    for(let p = 0; p < SIZE; p++){\n      let squares = [];\n      for(let q = 0; q < SIZE; q++){\n        squares.push(this.renderSquare(SIZE*p+q));\n      }\n      rows.push(<div className=\"board-row\" style={{width:(SIZE)*WIDTH_COEFFICIENT+\"px\"}}>{squares}</div>);\n    }\n    return rows;\n  }\n  \n  render() {  \n    return (\n      <center>\n      <Row className=\"justify-content-center\" style={{alignContent: \"center\", height: \"60%\"}}>\n            <Col xs={12} md={6} className=\"justify-content-center\">\n\n              <button id=\"lifeA\" className=\"btn\"  onClick={() => this.lifeA()}>生命甲 | Life A</button>\n              <button id=\"lifeB\" className=\"btn\"  onClick={() => this.lifeB()}>生命乙 | Life B</button>\n              <button id=\"theWorld\" className=\"btn\"  onClick={() => this.world()}>世界 | The World</button>\n              <button id=\"custom\" className=\"btn\"  onClick={() => this.reset()}>自定 | Custom</button>\n              <br></br>\n              <button id=\"startBtn\" className=\"btn2\" onClick={() => this.start()}><b>开始 | Start</b></button>\n              \n              <button id=\"stopBtn\" className=\"btn2\" onClick={() => this.stop()}><b>暂停 | Stop</b></button>\n              \n              <button className=\"btn2\" onClick={() => this.reset()}><b>清空 | Clear</b></button>\n              <br></br>\n              <label id=\"amountData\" className=\"lb\">数量 | Lives: 0</label>\n              \n              <label id=\"timeData\" className=\"lb\">时间 | Time: 0s</label>\n          </Col>\n      </Row>\n\n      <div className=\"board\" style={{width:(SIZE)*WIDTH_COEFFICIENT+\"px\"}}>\n        {this.createSquares()}\n      </div>\n\n      </center>\n    );\n  }\n}\n// ===== End of Frontend Components =====\n\n\n// ===== Frontend Layout =====\nconst root = ReactDOM.createRoot(document.getElementById(\"root\")).render(\n    <Container fluid style={{backgroundColor: \"#ffffff\", padding: \"0px\", margin:\"0px\"}}>  \n      <Row className=\"justify-content-center\" style={{alignContent: \"center\", height: \"80%\"}}>\n        <h3 style={{width: \"100%\", textAlign: \"center\", marginTop: \"10px\", color: \"#000000\"}}><b>康威生命游戏 | Conway's Game of Life</b></h3>\n        \n        <center>\n          <font size=\"2\" >请先阅读下方的<b>使用说明</b> | Please read the <b>Instructions</b> below first</font>\n        </center>\n      </Row>\n\n      <Row className=\"justify-content-center\" style={{alignContent: \"center\", height: \"60%\"}}>\n          <Col xs={6} md={6} className=\"justify-content-center\">\n              \n              <div id=\"bi_iframe\" style={{alignContent:\"left\" ,transformOrigin: \"0 top 0\", margin:\"10px\"}}>\n              <Board />\n              </div>\n              \n          </Col>\n      </Row>\n\n      <br></br>\n        \n      <Row className=\"justify-content-center\" style={{alignContent: \"center\", height: \"60%\"}}>\n        <Col xs={12} sm={6} md={6} className=\"justify-content-center\" width=\"80%\">\n        <h2 style={{width: \"100%\", textAlign: \"center\", marginTop: \"20px\", color: \"#000000\"}}>使用说明 | Instructions</h2>\n        \n        <font size=\"2\" style={{width: \"100%\", textAlign: \"center\", marginTop: \"20px\", color: \"#000000\"}}>\n            <li style={{marginLeft:\"10px\"}}>1. <b>创建生命</b>。点击“生命甲”、“生命乙”、“世界”选择例子，或点击“自定”创建自己的世界；</li>\n            <li style={{marginLeft:\"10px\"}}>2. 若你选择“自定”，请在方格世界中点击方格，以创建或消除生命。黑色代表存活，白色代表死亡；</li>\n            <li style={{marginLeft:\"10px\"}}>3. <b>开始生存</b>。点击“开始”使世界开始运作，点击“暂停”使世界暂停运作，点击“清空”清空世界中的生命；</li>\n            <li style={{marginLeft:\"10px\"}}>4. 在重复第一步前，请先“暂停”或“清空”，使某些静止的生命体暂停生存。</li>\n        </font>\n        <br></br>\n        <font size=\"2\" style={{width: \"100%\", textAlign: \"center\", marginTop: \"20px\", color: \"#000000\"}}>\n            <li style={{marginLeft:\"10px\"}}>1. <b>Create Lives</b>. Click on \"Life A\", \"Life B\", or \"The World\" to select an example, or click on \"Custom\" to create your lives;</li>\n            <li style={{marginLeft:\"10px\"}}>2. If you select \"Custom\", click on a square in the World to create or eliminate a Life. Black for Life, white for Death;</li>\n            <li style={{marginLeft:\"10px\"}}>3. <b>Start Surviving</b>. Click on \"Start\" to start the World, click on \"Stop\" to stop the world, click on \"Clear\" to clear all Lives;</li>\n            <li style={{marginLeft:\"10px\"}}>4. Before repeating the first step, please first click on \"Stop\" or \"Clear\", so that some static life suspends survivals.</li>\n        </font>\n      \n        <h2 style={{width: \"100%\", textAlign: \"center\", marginTop: \"20px\", color: \"#000000\"}}>解释 | Explanations</h2>\n        <font size=\"2\" style={{width: \"100%\", textAlign: \"center\", marginTop: \"20px\", color: \"#000000\"}}>\n          <center>\n          每一个方块代表一个生命，并有以下规则：\n          <li style={{marginLeft:\"10px\"}}>1. 每个生命有两种状态-<b>存活</b>或<b>死亡</b>，每个生命只与其周围<b>八个生命</b>产生互动；</li>\n          <li style={{marginLeft:\"10px\"}}>2. 若某个生命状态为<b>存活</b>，并且其周围有 <b>0 或 1</b> 个存活的生命，此生命便会<b>死亡</b>（模拟濒危）；</li>\n          <li style={{marginLeft:\"10px\"}}>3. 若某个生命状态为<b>存活</b>，并且其周围有<b>超过 3</b> 个存活的生命，此生命便会<b>死亡</b>（模拟数量过多）；</li>\n          <li style={{marginLeft:\"10px\"}}>4. 若某个生命状态为<b>存活</b>，并且其周围有 <b>2 或 3</b> 个存活的生命，此生命<b>保持原状</b>（模拟平衡）；</li>\n          <li style={{marginLeft:\"10px\"}}>5. 若某个生命状态为<b>死亡</b>，并且其周围有 <b>3</b> 个存活的生命，此生命<b>变成存活状态</b>（模拟繁殖）；</li>\n          <li style={{marginLeft:\"10px\"}}>6. 当前的所有生命会<b>同时</b>被以上规则处理，以得到下一代生命，不断更新。</li>\n          </center>\n\n          <br></br>\n\n          <center>\n          Each square represents a Life with following rules:\n          <li style={{marginLeft:\"10px\"}}>1. Each Life has two states - <b>alive</b> or <b>dead</b>, and each Life interacts only with the <b>eight</b> lives around it;</li>\n          <li style={{marginLeft:\"10px\"}}>2. If a Life state is <b>alive</b>, and there is <b>0 or 1</b> living Life around it, this Life will <b>die</b> (for underpopulation);</li>\n          <li style={{marginLeft:\"10px\"}}>3. If a Life state is <b>alive</b>, and there are <b>more than 3</b> living Lives around it, this Life will <b>die</b> (for overpopulation)</li>\n          <li style={{marginLeft:\"10px\"}}>4. If a Life state is <b>alive</b>, and there are <b>2 or 3</b> living Lives around it, this Life will <b>survive</b> (for balance); </li>\n          <li style={{marginLeft:\"10px\"}}>5. If a Life state is <b>dead</b>, and there are exactly <b>3</b> living Lives around it, this Life will be <b>alive</b> (for reproduction); </li>\n          <li style={{marginLeft:\"10px\"}}>6. All current Lives will be processed by the above rules <b>simultaneously</b> to get the next generation repeatedly.</li>\n          </center>\n        </font>\n\n        </Col>\n      </Row>\n    </Container>\n);\n// ===== End of Frontend Layout =====",{"ruleId":"19","severity":1,"message":"20","line":1,"column":1,"nodeType":"21","messageId":"22","endLine":1,"endColumn":14,"fix":"23"},{"ruleId":"24","severity":1,"message":"25","line":44,"column":28,"nodeType":"26","messageId":"27","endLine":44,"endColumn":30},{"ruleId":"24","severity":1,"message":"25","line":44,"column":61,"nodeType":"26","messageId":"27","endLine":44,"endColumn":63},{"ruleId":"24","severity":1,"message":"25","line":93,"column":33,"nodeType":"26","messageId":"27","endLine":93,"endColumn":35},{"ruleId":"28","severity":1,"message":"29","line":119,"column":24,"nodeType":"30","messageId":"31","endLine":119,"endColumn":35},{"ruleId":"24","severity":1,"message":"25","line":255,"column":42,"nodeType":"26","messageId":"27","endLine":255,"endColumn":44},{"ruleId":"24","severity":1,"message":"25","line":266,"column":42,"nodeType":"26","messageId":"27","endLine":266,"endColumn":44},{"ruleId":"24","severity":1,"message":"25","line":270,"column":14,"nodeType":"26","messageId":"27","endLine":270,"endColumn":16},{"ruleId":"32","severity":1,"message":"33","line":396,"column":9,"nodeType":"34","messageId":"35","endLine":396,"endColumn":12},{"ruleId":"32","severity":1,"message":"36","line":397,"column":9,"nodeType":"34","messageId":"35","endLine":397,"endColumn":12},{"ruleId":"32","severity":1,"message":"37","line":464,"column":7,"nodeType":"34","messageId":"35","endLine":464,"endColumn":11},"strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"38","text":"39"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","no-unused-vars","'inX' is assigned a value but never used.","Identifier","unusedVar","'inY' is assigned a value but never used.","'root' is assigned a value but never used.",[0,13],""]